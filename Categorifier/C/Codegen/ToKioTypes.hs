{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE UndecidableInstances #-}

-- | Turn an hlist type into a list of CType with Arrays information and a random Gen.
module Categorifier.C.Codegen.ToKioTypes
  ( KioType (..),
    toKioType,
    ToKioTypes (..),
  )
where

import Categorifier.C.CTypes.Render (renderCxxType)
import Categorifier.C.CTypes.ToCxxType (CoercibleT, ToCxxType (..))
import Categorifier.C.CTypes.Types (CType, CxxType (..))
import Categorifier.C.CTypes.WhyNotCType (whyNotCType)
import Categorifier.C.KTypes.C (C (..), toCxxTypeViaC)
import Categorifier.C.PolyVec (PolyVec, pvlengths)
import Categorifier.C.Prim (ArrayCount, Arrays)
import Data.Proxy (Proxy (..))
import Data.Typeable (TypeRep, Typeable, typeRep)
import PyF (fmt)

data KioType = KioType
  { kiotRep :: TypeRep,
    kiotCType :: CType Proxy,
    kiotArraySizes :: Arrays ArrayCount
  }

instance Show KioType where
  show x =
    "KioType {kiotRep = " <> show (kiotRep x) <> ", "
      <> "kiotCType = "
      <> show (kiotCType x)
      <> ", "
      <> "kiotArraySizes = "
      <> show (kiotArraySizes x)
      <> "}"

toKioType ::
  forall a.
  (Typeable a, PolyVec C a, ToCxxType C a) =>
  Proxy a ->
  KioType
toKioType p =
  let arrayLengths = pvlengths (Proxy @C) p
   in KioType
        { kiotRep = typeRep p,
          kiotCType = toCTypeOrError p,
          kiotArraySizes = arrayLengths
        }

-- | For autogenerated functions
class ToKioTypes a where
  toKioTypes :: Proxy a -> [KioType]

instance (ToKioTypes a, ToKioTypes b) => ToKioTypes (a, b) where
  toKioTypes Proxy = toKioTypes (Proxy @a) <> toKioTypes (Proxy @b)

instance
  {-# OVERLAPPABLE #-}
  (Typeable a, PolyVec C a, ToCxxType C a) =>
  ToKioTypes a
  where
  toKioTypes = pure . toKioType

toCTypeOrError ::
  ( Applicative f,
    Traversable f,
    CoercibleT f,
    ToCxxType C a
  ) =>
  f a ->
  CType f
toCTypeOrError p = case toCxxTypeViaC p of
  CxxTypeCType ctype -> ctype
  cxxType ->
    error
      [fmt|\
ToKioTypes got a non-CType: {renderCxxType cxxType}
Tree of non-ctype fields:
{whyNotCType cxxType}
|]
