{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE QuasiQuotes #-}

module Categorifier.C.CTypes.Codegen.Arrays.Types
  ( ToOrFromArrays (..),
    CheckFinite (..),
    ArraysFunType (..),
    passByValue,
    toArrayIdentifier,
    toArrayIdentifier',
    toArrayIdentPrefix,
  )
where

import Categorifier.C.CTypes.DSL.CxxAst
  ( Identifier (..),
  )
import Categorifier.C.CTypes.Types
  ( CConF (..),
    CStructF (..),
    CType,
    CTypeF (..),
    CUnionCon,
    CUnionConF (..),
  )
import Categorifier.C.Prim (Prim, getPrimCName)
import Data.Proxy (Proxy (..))
import Data.Text (Text)
import PyF (fmt)

data ToOrFromArrays = ToArrays' | FromArrays' deriving (Eq)

-- This show instance is used for the autogenerated function name.
instance Show ToOrFromArrays where
  show ToArrays' = "ToArrays"
  show FromArrays' = "FromArrays"

data CheckFinite = CheckFinite | Don'tCheckFinite deriving (Eq, Show)

-- | Make functions for each type plus union constructor types
data ArraysFunType
  = AfCType (CType Proxy)
  | AfCUnionCon (CUnionCon Proxy)
  deriving (Eq, Ord)

-- TODO(greg): This should not be something that needs to be worried about at this scope.
-- The rendering mechanisms should take care of it.
passByValue :: ToOrFromArrays -> ArraysFunType -> Bool
passByValue _ (AfCType CTypeArray {}) = True -- arrays passed by value (array to pointer decay)
passByValue FromArrays' _ = False
passByValue ToArrays' (AfCType CTypePrim {}) = True
passByValue ToArrays' (AfCType CTypeEnum {}) = True
passByValue ToArrays' (AfCType (CTypeStruct (CStruct _ CNullaryCon {}))) = False
passByValue ToArrays' (AfCType (CTypeStruct (CStruct _ CBitfieldCon {}))) = True
passByValue ToArrays' (AfCType (CTypeStruct (CStruct _ CNormalCon {}))) = False
passByValue ToArrays' (AfCUnionCon (CUnionCon _ CNullaryCon {})) = False
passByValue ToArrays' (AfCUnionCon (CUnionCon _ CBitfieldCon {})) = True
passByValue ToArrays' (AfCUnionCon (CUnionCon _ CNormalCon {})) = False
passByValue ToArrays' (AfCType CTypeUnion {}) = False

-- TODO(greg): de-duplicate
toArrayIdentifier :: ToOrFromArrays -> Prim Proxy -> Identifier
toArrayIdentifier = toArrayIdentifier' . toArrayIdentPrefix

toArrayIdentifier' :: Text -> Prim Proxy -> Identifier
toArrayIdentifier' prefix cprim = Identifier [fmt|{prefix}_{getPrimCName cprim}|]

toArrayIdentPrefix :: ToOrFromArrays -> Text
toArrayIdentPrefix ToArrays' = "output"
toArrayIdentPrefix FromArrays' = "input"
